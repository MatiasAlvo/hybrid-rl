diff --git a/configs/policies/hybrid_general_policy.yml b/configs/policies/hybrid_general_policy.yml
index 311d294..a13ae7d 100644
--- a/configs/policies/hybrid_general_policy.yml
+++ b/configs/policies/hybrid_general_policy.yml
@@ -1,5 +1,5 @@
 trainer_params:
-  'epochs': 100
+  'epochs': 1000
   'do_dev_every_n_epochs': 1
   'print_results_every_n_epochs': 1
   'save_model': false
@@ -11,9 +11,9 @@ trainer_params:
   'save_model_filename': 'model'
 
 optimizer_params:
-  'learning_rate': 0.0001
+  'learning_rate': 0.00001
   'weight_decay': 0.0
-  'gradient_clip': null
+  'gradient_clip': 1.0
 
 nn_params:
   policy_network:
@@ -37,10 +37,10 @@ nn_params:
     enabled: true
     hidden_layers: [64, 64]
     activation: 'elu'
-    dropout: 0.1
+    dropout: 0.0
     batch_norm: false
     observation_keys: [
-      'store_inventories'
+      'store_inventories',
       # 'past_demands',
       # 'current_period'
     ]
\ No newline at end of file
diff --git a/configs/settings/hybrid_general.yml b/configs/settings/hybrid_general.yml
index 081ebc9..7cfac63 100644
--- a/configs/settings/hybrid_general.yml
+++ b/configs/settings/hybrid_general.yml
@@ -29,12 +29,14 @@ problem_params:
   'n_warehouses': 0
   'n_extra_echelons': 0
   'lost_demand': true
-  'maximize_profit': true
+  'maximize_profit': false
   'is_hybrid': true
   'discrete_features': 
     'fixed_ordering_cost': 
-      'thresholds': [0, 0.01, 12]  # first and last values are the same across all discrete features
-      'values': [0.0, 20.0]
+      'thresholds': [-0.0001, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]  # first and last values are the same across all discrete features
+      'values': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
+      # 'thresholds': [0, 0.01, 7.0]  # first and last values are the same across all discrete features
+      # 'values': [0.0, 20.0]
       # 'thresholds': [0, 4, 8, 12]  # first and last values are the same across all discrete features
       # 'values': [1.0, 2.0, 3.0]
     # 'bulk_discounts':  # Set to null to disable
@@ -52,11 +54,11 @@ observation_params:
     'mean': False
     'std': False
   'demand': 
-    'past_periods': 16 
-    'period_shift': 16
+    'past_periods': 0 
+    'period_shift': 0
   'include_past_observations':
-    'arrivals': 8
-    'orders': 8
+    'arrivals': 0
+    'orders': 0
   'time_features_file': null
   'time_features': null
   'sample_features_file': null
@@ -89,7 +91,7 @@ store_params:
     'sample': False
     'inventory_periods': 2
   'procurement_cost':
-    'value': 1.0
+    'value': 0.0
     'vary_across_samples': False
     'sample_across_stores': False
     'expand': True
@@ -103,17 +105,24 @@ echelon_params:
 
 params_by_dataset : 
   'train': 
-    'n_samples': 1024 
+    'n_samples': 8192 
     'batch_size': 1024  # Values tested: 1024, 8192
     'periods': 50 
     'ignore_periods': 16 
   'dev': 
-    'n_samples': 1024 
+    'n_samples': 8192 
     'batch_size': 1024 
     'periods': 50 
     'ignore_periods': 16 
   'test': 
-    'n_samples': 1024 
+    'n_samples': 8192 
     'batch_size': 1024 
     'periods': 30 
     'ignore_periods': 16
+
+logging_params:
+  use_wandb: true
+  wandb_project_name: "inventory_control"
+  wandb_entity: alvomatias  # Your wandb username or team name
+  exp_name: "hybrid_general"
+  env_name: "inventory"
diff --git a/main_run.py b/main_run.py
index 9691a6e..e7937b6 100644
--- a/main_run.py
+++ b/main_run.py
@@ -38,7 +38,7 @@ from src.algorithms.hybrid.optimizer_wrappers.hybrid_wrapper import HybridWrappe
 from src.utils.config_loader import ConfigLoader
 from src.utils.logging_config import setup_logging
 
-torch.autograd.set_detect_anomaly(True)  # This will help detect anomalies in backward passes
+# torch.autograd.set_detect_anomaly(True)  # This will help detect anomalies in backward passes
 
 def get_timestamp():
     """Get current timestamp for model saving"""
@@ -94,6 +94,9 @@ trainer_params = config_hyperparams['trainer_params']
 optimizer_params = config_hyperparams['optimizer_params']
 nn_params = config_hyperparams['nn_params']
 
+# Add logging params to trainer_params
+trainer_params['logging_params'] = config_setting.get('logging_params', {})
+
 feature_registry = None
 # Initialize range manager if this is a hybrid problem
 if problem_params.get('is_hybrid', False):
@@ -165,6 +168,7 @@ else:
     test_dataset = dataset_creator.create_datasets(test_scenario, split=False)
 
 # Create data loaders
+# train_loader = DataLoader(train_dataset, batch_size=params_by_dataset['train']['batch_size'], shuffle=False)
 train_loader = DataLoader(train_dataset, batch_size=params_by_dataset['train']['batch_size'], shuffle=True)
 dev_loader = DataLoader(dev_dataset, batch_size=params_by_dataset['dev']['batch_size'], shuffle=False)
 test_loader = DataLoader(test_dataset, batch_size=params_by_dataset['test']['batch_size'], shuffle=False)
@@ -182,7 +186,7 @@ if feature_registry:
 else:
     model = HDPOAgent(agent_config, device=device)
 
-optimizer = torch.optim.Adam(model.parameters(), lr=optimizer_params['learning_rate'])
+optimizer = torch.optim.Adam(model.parameters(), lr=optimizer_params['learning_rate'], eps=1e-5)
 
 # Initialize trainer
 trainer = Trainer(device=device)
diff --git a/notebooks/examples/censored_demand.ipynb b/notebooks/examples/censored_demand.ipynb
index 622e7c3..c96735d 100644
--- a/notebooks/examples/censored_demand.ipynb
+++ b/notebooks/examples/censored_demand.ipynb
@@ -1,15 +1,255 @@
 {
  "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": 1,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import numpy as np\n",
+    "import matplotlib.pyplot as plt\n",
+    "import scipy.stats as stats\n",
+    "import scipy.optimize as optimize\n",
+    "import warnings\n",
+    "import seaborn as sns"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Weibull Demand Generator"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "class WeibullDemandGenerator:\n",
+    "   def __init__(self, num_samples, periods, k=2.0):\n",
+    "       self.num_samples = num_samples\n",
+    "       self.periods = periods\n",
+    "       self.k = k\n",
+    "\n",
+    "   def estimate_weibull_scale(self, samples, M, n_tail_buckets=3, fixed_lambda=None):\n",
+    "       if fixed_lambda is not None:\n",
+    "           return fixed_lambda\n",
+    "           \n",
+    "       flat_samples = samples.flatten()\n",
+    "       tail_samples = flat_samples[(flat_samples >= M-n_tail_buckets) & (flat_samples <= M)]\n",
+    "       n_at_threshold = np.sum(flat_samples == M)\n",
+    "       \n",
+    "       def neg_log_likelihood(scale):\n",
+    "           eps = 1e-10\n",
+    "           scale = max(scale, eps)\n",
+    "           \n",
+    "           uncensored = tail_samples[tail_samples < M]\n",
+    "           pdf_term = np.sum(np.log(eps + stats.weibull_min.pdf(\n",
+    "               uncensored - (M-n_tail_buckets), \n",
+    "               c=self.k,\n",
+    "               scale=scale\n",
+    "           )))\n",
+    "           \n",
+    "           if n_at_threshold > 0:\n",
+    "               sf = stats.weibull_min.sf(n_tail_buckets - 1, c=self.k, scale=scale)\n",
+    "               threshold_term = n_at_threshold * np.log(eps + sf)\n",
+    "           else:\n",
+    "               threshold_term = 0\n",
+    "               \n",
+    "           return -(pdf_term + threshold_term)\n",
+    "       \n",
+    "       result = optimize.minimize_scalar(\n",
+    "           neg_log_likelihood, \n",
+    "           bounds=(1e-6, 20), \n",
+    "           method='bounded',\n",
+    "           options={'xatol': 1e-8}\n",
+    "       )\n",
+    "\n",
+    "       if not result.success:\n",
+    "           warnings.warn(f\"Scale estimation did not converge: {result.message}\")\n",
+    "           \n",
+    "       return result.x\n",
+    "\n",
+    "   def fit_and_sample(self, problem_params, demand_params, seed=None, fixed_lambda=None):\n",
+    "       if seed is not None:\n",
+    "           np.random.seed(seed)\n",
+    "       \n",
+    "       M = problem_params.get('censoring_threshold', 7)\n",
+    "       n_tail_buckets = problem_params.get('n_tail_buckets', 3)\n",
+    "       \n",
+    "       orig_samples = np.random.poisson(\n",
+    "           demand_params['mean'], \n",
+    "           size=(self.num_samples, problem_params['n_stores'], self.periods)\n",
+    "       )\n",
+    "       \n",
+    "       imputed_samples = np.minimum(orig_samples, M)\n",
+    "       censored_mask = orig_samples >= M\n",
+    "       \n",
+    "       weibull_scale = self.estimate_weibull_scale(orig_samples, M, n_tail_buckets, fixed_lambda)\n",
+    "       \n",
+    "       n_censored = np.sum(censored_mask)\n",
+    "       lower_bound = stats.weibull_min.cdf(n_tail_buckets, c=self.k, scale=weibull_scale)\n",
+    "       uniform_samples = np.random.uniform(lower_bound, 1-1e-10, size=n_censored)\n",
+    "       \n",
+    "       censored_tails = np.floor(\n",
+    "           M + stats.weibull_min.ppf(uniform_samples, c=self.k, scale=weibull_scale) - n_tail_buckets\n",
+    "       ).astype(int)\n",
+    "       \n",
+    "       imputed_samples[censored_mask] = censored_tails\n",
+    "       \n",
+    "       return imputed_samples"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 5,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "def plot_demand_distributions(k_values, lambda_values, problem_params, demand_params, num_samples=100000):\n",
+    "   plt.figure(figsize=(12, 8))\n",
+    "   \n",
+    "   # Original Poisson in black dashed\n",
+    "   x = np.arange(0, 15)\n",
+    "   poisson_pmf = stats.poisson.pmf(x, mu=demand_params['mean'])\n",
+    "   plt.plot(x, poisson_pmf, 'k--', lw=3, label='Original Poisson')\n",
+    "   \n",
+    "   colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']\n",
+    "   linestyles = ['-', '--', ':']\n",
+    "   \n",
+    "   for i, k in enumerate(k_values):\n",
+    "       generator = WeibullDemandGenerator(num_samples=num_samples, periods=1, k=k)\n",
+    "       for j, lmbda in enumerate(lambda_values):\n",
+    "           censored_data = generator.fit_and_sample(\n",
+    "               problem_params, \n",
+    "               demand_params, \n",
+    "               seed=42, \n",
+    "               fixed_lambda=lmbda\n",
+    "           ).flatten()\n",
+    "           \n",
+    "           counts, bins = np.histogram(censored_data, bins=range(0, 16), density=True)\n",
+    "           bin_centers = (bins[:-1] + bins[1:]) / 2\n",
+    "           plt.plot(bin_centers, counts, \n",
+    "                   color=colors[i],\n",
+    "                   linestyle=linestyles[j % 3],\n",
+    "                   linewidth=2,\n",
+    "                   label=f'k={k:.2f}, λ={lmbda:.2f}')\n",
+    "   \n",
+    "   plt.axvline(problem_params['censoring_threshold'], color='red', linestyle=':', linewidth=2, label='Censoring')\n",
+    "   plt.xlim(0, 15)\n",
+    "   plt.xlabel('Demand')\n",
+    "   plt.ylabel('Density')\n",
+    "   plt.title('Demand Distributions')\n",
+    "   plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n",
+    "   plt.grid(True, alpha=0.3)\n",
+    "   plt.tight_layout()\n",
+    "   plt.show()"
+   ]
+  },
   {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {},
+   "outputs": [],
+   "source": [
+    "demand_params = {\n",
+    "   'mean': 5  # Poisson mean\n",
+    "}\n",
+    "\n",
+    "problem_params = {\n",
+    "   'censoring_threshold': 8,\n",
+    "   'n_stores': 1,\n",
+    "   'n_tail_buckets': 2\n",
+    "}\n",
+    "\n",
+    "# Example usage:\n",
+    "k_values = [0.8, 1.0, 1.2]\n",
+    "lambda_values = [1.0, 2.0, 3.0]\n",
+    "plot_demand_distributions(k_values, lambda_values, problem_params, demand_params)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 21,
+   "metadata": {},
    "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "(1000, 5, 50)\n"
+     ]
+    },
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
-       "<Figure size 640x480 with 1 Axes>"
+       "<Figure size 1000x600 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "# Initialize generator with k close to 1\n",
+    "generator = WeibullDemandGenerator(num_samples=1000, periods=50, k=0.8)\n",
+    "\n",
+    "# Set parameters\n",
+    "problem_params = {\n",
+    "   'censoring_threshold': 8,\n",
+    "   'n_stores': 5,\n",
+    "   'n_tail_buckets': 2\n",
+    "}\n",
+    "demand_params = {\n",
+    "   'mean': 5  # Poisson mean\n",
+    "}\n",
+    "\n",
+    "# Generate censored demand with fixed lambda\n",
+    "fixed_lambda = 3.0  # Represent rate of the exponential distribution\n",
+    "censored_data = generator.fit_and_sample(problem_params, demand_params, seed=42, fixed_lambda=fixed_lambda)\n",
+    "print(censored_data.shape)\n",
+    "censored_data = censored_data.flatten()\n",
+    "\n",
+    "# Create histogram of censored data\n",
+    "plt.figure(figsize=(10, 6))\n",
+    "plt.hist(censored_data, bins=range(int(min(censored_data)), int(max(censored_data)) + 2, 1), \n",
+    "        density=True, alpha=0.7, label='Censored Data')\n",
+    "\n",
+    "# Plot original Poisson distribution\n",
+    "x = np.arange(0, max(censored_data) + 1)\n",
+    "poisson_pmf = stats.poisson.pmf(x, mu=demand_params['mean'])\n",
+    "plt.plot(x, poisson_pmf, 'r-', lw=2, label='Original Poisson PMF')\n",
+    "\n",
+    "plt.axvline(problem_params['censoring_threshold'], color='black', linestyle='--', label='Censoring Threshold')\n",
+    "plt.xlim(0, 15)\n",
+    "plt.xlabel('Demand')\n",
+    "plt.ylabel('Density')\n",
+    "plt.title(f'Censored Demand (k={generator.k}, λ={fixed_lambda}) vs Original Poisson')\n",
+    "plt.legend()\n",
+    "plt.grid(True)\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Estimating via Kaplan-Meier"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 16,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 1000x600 with 1 Axes>"
       ]
      },
      "metadata": {},
@@ -18,8 +258,587 @@
    ],
    "source": [
     "import numpy as np\n",
-    "import scipy.stats as stats\n",
-    "import scipy.optimize as optimize\n",
+    "from scipy import stats, optimize\n",
+    "from lifelines import KaplanMeierFitter\n",
+    "import matplotlib.pyplot as plt\n",
+    "\n",
+    "class KMSampler:\n",
+    "    def __init__(self, num_samples, periods):\n",
+    "        self.kmf = None\n",
+    "        self.tail_rate = None\n",
+    "        self.max_uncensored = None\n",
+    "        self.num_samples = num_samples\n",
+    "        self.periods = periods\n",
+    "    \n",
+    "    def fit(self, observed_data, censoring_indicators, M, n_buckets=3):\n",
+    "        \"\"\"Fit KM estimator and tail rate to data\"\"\"\n",
+    "        self.kmf = KaplanMeierFitter()\n",
+    "        self.kmf.fit(observed_data, censoring_indicators)\n",
+    "        \n",
+    "        # Get CDF values\n",
+    "        times = self.kmf.survival_function_.index\n",
+    "        cdf = 1 - self.kmf.survival_function_.values.flatten()\n",
+    "        \n",
+    "        # Get the last n_buckets points and their densities\n",
+    "        last_cdfs = cdf[-(n_buckets+1):]  # Get last 3 CDF values\n",
+    "        densities = np.diff(last_cdfs)     # Get P(X = k) for k in [M-2, M-1, M]\n",
+    "        p_greater_M = 1 - last_cdfs[-1]    # P(X > M)\n",
+    "        densities = np.append(densities, p_greater_M)\n",
+    "        \n",
+    "        # print(f\"Debug - Last CDF values: {last_cdfs}\")\n",
+    "        # print(f\"Debug - Densities at last points: {densities}\")\n",
+    "        # print(f\"Debug - P(X > M): {p_greater_M}\")\n",
+    "        \n",
+    "        def neg_log_likelihood(rate):\n",
+    "            if rate <= 0:\n",
+    "                return np.inf\n",
+    "            \n",
+    "            # Calculate model probabilities\n",
+    "            model_probs = np.array([\n",
+    "                np.exp(-rate * i) - np.exp(-rate * (i + 1))\n",
+    "                for i in range(n_buckets)\n",
+    "            ])\n",
+    "            # for last bucket, model prob is np.exp(-rate * n_buckets). need to add it to the last bucket\n",
+    "            model_probs = np.append(model_probs, np.exp(-rate * n_buckets))\n",
+    "            \n",
+    "            # Avoid log(0)\n",
+    "            valid_idx = (densities > 0) & (model_probs > 0)\n",
+    "            if not np.any(valid_idx):\n",
+    "                return np.inf\n",
+    "                \n",
+    "            return -np.sum(densities[valid_idx] * np.log(model_probs[valid_idx]))\n",
+    "        \n",
+    "        result = optimize.minimize_scalar(\n",
+    "            neg_log_likelihood, \n",
+    "            bounds=(0.001, 2.0),\n",
+    "            method='bounded'\n",
+    "        )\n",
+    "        \n",
+    "        self.tail_rate = result.x\n",
+    "        self.threshold = times[-1]  # This is M\n",
+    "        # print(f'Estimated tail rate: {self.tail_rate}')\n",
+    "        \n",
+    "    def sample(self, n_samples):\n",
+    "        \"\"\"Generate new samples from fitted distribution\"\"\"\n",
+    "        if self.kmf is None:\n",
+    "            raise ValueError(\"Must fit model before sampling\")\n",
+    "            \n",
+    "        # Get survival function values\n",
+    "        times = np.arange(np.min(self.kmf.survival_function_.index), \n",
+    "                        np.max(self.kmf.survival_function_.index) + 1)\n",
+    "        cdf = 1 - self.kmf.survival_function_at_times(times).values\n",
+    "        \n",
+    "        samples = np.zeros(n_samples)\n",
+    "        for i in range(n_samples):\n",
+    "            u = np.random.uniform(0, 1)\n",
+    "            \n",
+    "            # Find the smallest time where CDF is greater than u\n",
+    "            mask = cdf >= u\n",
+    "            if np.any(mask):  # Use KM distribution\n",
+    "                samples[i] = times[np.where(mask)[0][0]]\n",
+    "            else:\n",
+    "                # Sample from tail using threshold (M) instead of max_uncensored\n",
+    "                excess = np.random.exponential(1/self.tail_rate)\n",
+    "                samples[i] = self.threshold + np.floor(excess)\n",
+    "\n",
+    "        \n",
+    "        return samples.astype(int)\n",
+    "\n",
+    "    def fit_and_sample(self, n_fit, problem_params, demand_params, censoring_process, seed=None):\n",
+    "        \"\"\"\n",
+    "        Run experiment fitting KM to n_fit samples and generating n_generate new ones\n",
+    "        \"\"\"\n",
+    "        if seed is not None:\n",
+    "            np.random.seed(seed)\n",
+    "            \n",
+    "        # Generate training data\n",
+    "        true_demand = np.random.poisson(demand_params['mean'], size=n_fit)\n",
+    "        thresholds = np.random.poisson(censoring_process['mean'], size=n_fit)\n",
+    "        \n",
+    "        # Apply censoring\n",
+    "        observed = np.minimum(true_demand, thresholds)\n",
+    "        # Changed to use <= for correct censoring indicators\n",
+    "        censoring_indicators = (true_demand <= thresholds).astype(int)\n",
+    "\n",
+    "        # # print the largest uncensored value (this is, only consider the values that are not censored)    \n",
+    "        # print(f\"Largest uncensored value: {np.max(observed[censoring_indicators == 1])}\")\n",
+    "        # print(f\"Largest censored value: {np.max(observed[censoring_indicators == 0])}\")\n",
+    "\n",
+    "        # Fit sampler\n",
+    "        self.fit(observed, censoring_indicators, M=np.max(thresholds))\n",
+    "        \n",
+    "        n_generate = problem_params['n_stores'] * self.periods * self.num_samples\n",
+    "\n",
+    "        # Generate new samples\n",
+    "        generated_samples = self.sample(n_generate)\n",
+    "\n",
+    "        # reshape to self.num_samples, self.n_stores, self.periods\n",
+    "        generated_samples = generated_samples.reshape(self.num_samples, problem_params['n_stores'], self.periods)\n",
+    "\n",
+    "\n",
+    "        return generated_samples\n",
+    "\n",
+    "def run_sampling_experiment(n_fit, n_generate, demand_params, censoring_process, seed=None):\n",
+    "    \"\"\"\n",
+    "    Run experiment fitting KM to n_fit samples and generating n_generate new ones\n",
+    "    \"\"\"\n",
+    "    if seed is not None:\n",
+    "        np.random.seed(seed)\n",
+    "        \n",
+    "    # Generate training data\n",
+    "    true_demand = np.random.poisson(demand_params['mean'], size=n_fit)\n",
+    "    thresholds = np.random.poisson(censoring_process['mean'], size=n_fit)\n",
+    "    \n",
+    "    # Apply censoring\n",
+    "    observed = np.minimum(true_demand, thresholds)\n",
+    "    # Changed to use <= for correct censoring indicators\n",
+    "    censoring_indicators = (true_demand <= thresholds).astype(int)\n",
+    "\n",
+    "    # # print the largest uncensored value (this is, only consider the values that are not censored)    \n",
+    "    # print(f\"Largest uncensored value: {np.max(observed[censoring_indicators == 1])}\")\n",
+    "    # print(f\"Largest censored value: {np.max(observed[censoring_indicators == 0])}\")\n",
+    "\n",
+    "    # Fit sampler\n",
+    "    sampler = KMSampler(num_samples=n_fit, periods=1)\n",
+    "    sampler.fit(observed, censoring_indicators, M=np.max(thresholds))\n",
+    "    \n",
+    "    # Generate new samples\n",
+    "    generated_samples = sampler.sample(n_generate)\n",
+    "    \n",
+    "    # Plot comparison\n",
+    "    plt.figure(figsize=(10, 6))\n",
+    "    \n",
+    "    # True distribution\n",
+    "    x = np.arange(0, max(20, np.max(generated_samples)))\n",
+    "    plt.plot(x, stats.poisson.pmf(x, demand_params['mean']), \n",
+    "             'k--', label='True Distribution')\n",
+    "    \n",
+    "    # Generated samples\n",
+    "    all_values = np.arange(min(generated_samples), max(generated_samples) + 1)\n",
+    "    counts = np.bincount(generated_samples.astype(int), \n",
+    "                        minlength=max(generated_samples) + 1)[min(generated_samples):]\n",
+    "    plt.plot(all_values, counts/len(generated_samples), \n",
+    "             'ro-', label='Generated Samples')\n",
+    "    \n",
+    "    plt.title(f'Distribution Comparison (n_fit={n_fit}, n_generate={n_generate})')\n",
+    "    plt.xlabel('Value')\n",
+    "    plt.ylabel('Probability')\n",
+    "    plt.legend()\n",
+    "    plt.grid(True)\n",
+    "    plt.show()\n",
+    "\n",
+    "# Example usage\n",
+    "if __name__ == \"__main__\":\n",
+    "    demand_params = {'mean': 5}\n",
+    "    censoring_process = {'name': 'poisson', 'mean': 6}\n",
+    "\n",
+    "    run_sampling_experiment(n_fit=100000, n_generate=10000, \n",
+    "                          demand_params=demand_params, \n",
+    "                          censoring_process=censoring_process,\n",
+    "                          seed=42)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 17,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "(1000, 5, 50)\n"
+     ]
+    }
+   ],
+   "source": [
+    "km_sampler = KMSampler(num_samples=1000, periods=50)\n",
+    "\n",
+    "problem_params = {'n_stores': 5}\n",
+    "demand_params = {'mean': 5}\n",
+    "censoring_process = {'name': 'poisson', 'mean': 6}\n",
+    "n_fit = 10000 # samples to fit the KM (equals to samples*periods*n_stores of the fictituous setting were data was gathered)\n",
+    "\n",
+    "samples = km_sampler.fit_and_sample(n_fit, problem_params, demand_params, censoring_process, seed=42)\n",
+    "print(samples.shape)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import matplotlib.pyplot as plt\n",
+    "\n",
+    "# Define the vectors\n",
+    "vector1 = [0.99342, 0.96007676, 0.87595408, 0.73728814, 0.56353113, 0.38665292,\n",
+    "            0.23893996, 0.13357496, 0.07033508, 0.03359873, 0.01292259, 0.00574337,\n",
+    "            0.00287169]\n",
+    "vector2 = [0.99326205, 0.95957232, 0.87534798, 0.73497408, 0.55950671, 0.38403935,\n",
+    "            0.23781654, 0.13337167, 0.06809363, 0.03182806, 0.01369527, 0.00545309,\n",
+    "            0.00201885]\n",
+    "\n",
+    "# Plot the vectors\n",
+    "plt.figure(figsize=(10, 6))\n",
+    "plt.plot(vector1, label='Vector 1', marker='o')\n",
+    "plt.plot(vector2, label='Vector 2', marker='o')\n",
+    "plt.title('Comparison of Two Vectors')\n",
+    "plt.xlabel('Index')\n",
+    "plt.ylabel('Value')\n",
+    "plt.legend()\n",
+    "plt.grid(True)\n",
+    "plt.show()\n"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "# Old Kaplan-Meier"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 46,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import numpy as np\n",
+    "from scipy import stats, optimize\n",
+    "from lifelines import KaplanMeierFitter\n",
+    "\n",
+    "class DynamicCensoringDemandGenerator:\n",
+    "    def __init__(self, num_samples, periods):\n",
+    "        self.num_samples = num_samples\n",
+    "        self.periods = periods\n",
+    "        \n",
+    "    def estimate_exponential_tail_rate(self, samples, censoring_indicators, M, n_buckets=3):\n",
+    "        flat_samples = samples.flatten()\n",
+    "        tail_samples = flat_samples[(flat_samples >= M-n_buckets) & (flat_samples <= M)]\n",
+    "        n_at_threshold = np.sum(flat_samples == M)\n",
+    "        \n",
+    "        def neg_log_likelihood(rate):\n",
+    "            uncensored = tail_samples[tail_samples < M]\n",
+    "            pdf_term = np.sum(np.log(stats.expon.pdf(\n",
+    "                uncensored - (M-n_buckets), \n",
+    "                scale=1/rate\n",
+    "            )))\n",
+    "            \n",
+    "            if n_at_threshold > 0:\n",
+    "                threshold_term = n_at_threshold * np.log(stats.expon.sf(\n",
+    "                    n_buckets - 1,\n",
+    "                    scale=1/rate\n",
+    "                ))\n",
+    "            else:\n",
+    "                threshold_term = 0\n",
+    "                \n",
+    "            return -(pdf_term + threshold_term)\n",
+    "        \n",
+    "        result = optimize.minimize_scalar(\n",
+    "            neg_log_likelihood,\n",
+    "            bounds=(0.01, 10),\n",
+    "            method='bounded'\n",
+    "        )\n",
+    "        \n",
+    "        return result.x\n",
+    "        \n",
+    "    def generate_censored_demand(self, problem_params, demand_params, censoring_process, seed=None):\n",
+    "        if seed is not None:\n",
+    "            np.random.seed(seed)\n",
+    "            \n",
+    "        # Generate true demand\n",
+    "        true_demand = np.random.poisson(\n",
+    "            demand_params['mean'],\n",
+    "            size=(self.num_samples, problem_params['n_stores'], self.periods)\n",
+    "        )\n",
+    "        \n",
+    "        # Generate censoring thresholds using the provided process\n",
+    "        if censoring_process['name'] == 'uniform':\n",
+    "            thresholds = np.random.randint(\n",
+    "                censoring_process['low'],\n",
+    "                censoring_process['high'] + 1,\n",
+    "                size=(self.num_samples, problem_params['n_stores'], self.periods)\n",
+    "            )\n",
+    "        elif censoring_process['name'] == 'poisson':\n",
+    "            thresholds = np.random.poisson(\n",
+    "                censoring_process['mean'],\n",
+    "                size=(self.num_samples, problem_params['n_stores'], self.periods)\n",
+    "            )\n",
+    "        else:\n",
+    "            raise ValueError(\"Unsupported censoring process\")\n",
+    "            \n",
+    "        # Apply censoring\n",
+    "        observed_demand = np.minimum(true_demand, thresholds)\n",
+    "        censoring_indicators = (true_demand <= thresholds).astype(int)\n",
+    "        \n",
+    "        # Flatten arrays for KM estimation\n",
+    "        flat_observed = observed_demand.flatten()\n",
+    "        flat_indicators = censoring_indicators.flatten()\n",
+    "        \n",
+    "        # Fit Kaplan-Meier\n",
+    "        kmf = KaplanMeierFitter()\n",
+    "        kmf.fit(flat_observed, flat_indicators)\n",
+    "        \n",
+    "        # Initialize imputed demand with observed values\n",
+    "        imputed_demand = observed_demand.copy()\n",
+    "        \n",
+    "        # Create mask for censored values\n",
+    "        censored_mask = (censoring_indicators == 0)\n",
+    "        n_censored = np.sum(censored_mask)\n",
+    "        \n",
+    "        if n_censored > 0:\n",
+    "            thresholds_censored = thresholds[censored_mask]\n",
+    "            survivor_probs = kmf.predict(thresholds_censored)\n",
+    "            \n",
+    "            # For points where KM estimate exists\n",
+    "            valid_probs = survivor_probs > 0\n",
+    "            if np.any(valid_probs):\n",
+    "                conditional_u = np.random.uniform(0, 1, size=np.sum(valid_probs))\n",
+    "                scaled_u = survivor_probs[valid_probs] * conditional_u\n",
+    "                # Find the time point where survival function equals scaled_u\n",
+    "                possible_times = np.arange(np.min(flat_observed), np.max(flat_observed) + 1)\n",
+    "                survival_probs = kmf.survival_function_at_times(possible_times).values\n",
+    "                imputed_values = np.array([possible_times[survival_probs <= u][-1] if any(survival_probs <= u) \n",
+    "                                         else possible_times[-1] for u in scaled_u])\n",
+    "                imputed_demand[censored_mask][valid_probs] = np.maximum(\n",
+    "                    np.ceil(imputed_values),\n",
+    "                    thresholds_censored[valid_probs][:]\n",
+    "                )\n",
+    "            \n",
+    "            # For points beyond KM support or where survival probability is 0\n",
+    "            if np.any(~valid_probs):\n",
+    "                M = np.max(thresholds)\n",
+    "                tail_rate = self.estimate_exponential_tail_rate(flat_observed, flat_indicators, M)\n",
+    "                tail_excess = np.random.exponential(1/tail_rate, size=np.sum(~valid_probs))\n",
+    "                imputed_demand[censored_mask][~valid_probs] = np.maximum(\n",
+    "                    thresholds_censored[~valid_probs][:],\n",
+    "                    thresholds_censored[~valid_probs][:] + np.ceil(tail_excess)\n",
+    "                )\n",
+    "         # make integer using np.floor       \n",
+    "        return np.floor(imputed_demand)\n",
+    "    "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 129,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Example usage\n",
+    "if __name__ == \"__main__\":\n",
+    "    # Parameters\n",
+    "    problem_params = {\n",
+    "        'n_stores': 5\n",
+    "    }\n",
+    "    \n",
+    "    demand_params = {\n",
+    "        'mean': 10  # Mean for demand Poisson process\n",
+    "    }\n",
+    "    \n",
+    "    # Example with uniform censoring\n",
+    "    censoring_uniform = {\n",
+    "        'name': 'uniform',\n",
+    "        'low': 5,\n",
+    "        'high': 15\n",
+    "    }\n",
+    "    \n",
+    "    # Example with Poisson censoring\n",
+    "    censoring_poisson = {\n",
+    "        'name': 'poisson',\n",
+    "        'mean': 8\n",
+    "    }\n",
+    "\n",
+    "# Create generator\n",
+    "generator = DynamicCensoringDemandGenerator(num_samples=1000, periods=12)\n",
+    "\n",
+    "# Generate with uniform censoring\n",
+    "uniform_results = generator.generate_censored_demand(\n",
+    "    problem_params,\n",
+    "    demand_params,\n",
+    "    censoring_uniform,\n",
+    "    seed=42\n",
+    ")\n",
+    "\n",
+    "# Generate with Poisson censoring\n",
+    "poisson_results = generator.generate_censored_demand(\n",
+    "    problem_params,\n",
+    "    demand_params,\n",
+    "    censoring_poisson,\n",
+    "    seed=42\n",
+    ")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "\n",
+    "def plot_density_comparison(sample_sizes, demand_params, censoring_process, seed=42):\n",
+    "    \"\"\"Plot densities of imputed demands for different sample sizes\"\"\"\n",
+    "    plt.figure(figsize=(12, 6))\n",
+    "    colors = sns.color_palette(\"husl\", len(sample_sizes))\n",
+    "    \n",
+    "    # Plot true Poisson PMF\n",
+    "    x = np.arange(0, 20)\n",
+    "    pmf = stats.poisson.pmf(x, demand_params['mean'])\n",
+    "    plt.plot(x, pmf, 'k--', label='True Poisson', linewidth=2)\n",
+    "    \n",
+    "    # Generate and plot for each sample size\n",
+    "    for size, color in zip(sample_sizes, colors):\n",
+    "        # Create generator\n",
+    "        generator = DynamicCensoringDemandGenerator(num_samples=size, periods=1)\n",
+    "        \n",
+    "        # Generate data\n",
+    "        imputed = generator.generate_censored_demand(\n",
+    "            {'n_stores': 1},\n",
+    "            demand_params,\n",
+    "            censoring_process,\n",
+    "            seed=seed\n",
+    "        )\n",
+    "        \n",
+    "        # Plot kernel density\n",
+    "        sns.kdeplot(imputed.flatten(), label=f'n={size}', color=color)\n",
+    "    \n",
+    "    plt.title('Density Comparison: True vs Imputed Demand')\n",
+    "    plt.xlabel('Demand')\n",
+    "    plt.ylabel('Density')\n",
+    "    plt.legend()\n",
+    "    plt.grid(True)\n",
+    "    plt.show()\n",
+    "\n",
+    "# Example usage\n",
+    "sample_sizes = [100, 1000, 100000]\n",
+    "demand_params = {'mean': 5}\n",
+    "censoring_process = {\n",
+    "    'name': 'poisson',\n",
+    "    'mean': 4\n",
+    "}\n",
+    "\n",
+    "plot_density_comparison(sample_sizes, demand_params, censoring_process)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import numpy as np\n",
+    "import matplotlib.pyplot as plt\n",
+    "from scipy import stats\n",
+    "\n",
+    "def plot_density_comparison(sample_sizes, demand_params, censoring_process, seed=42):\n",
+    "    \"\"\"Plot PMFs of imputed demands for different sample sizes\"\"\"\n",
+    "    plt.figure(figsize=(12, 6))\n",
+    "    colors = plt.cm.viridis(np.linspace(0, 1, len(sample_sizes)))\n",
+    "    \n",
+    "    # Plot true Poisson PMF\n",
+    "    x = np.arange(0, 20)\n",
+    "    pmf = stats.poisson.pmf(x, demand_params['mean'])\n",
+    "    plt.plot(x, pmf, 'k--', label='True Poisson', linewidth=2)\n",
+    "    \n",
+    "    # Generate and plot for each sample size\n",
+    "    for size, color in zip(sample_sizes, colors):\n",
+    "        # Create generator\n",
+    "        generator = DynamicCensoringDemandGenerator(num_samples=size, periods=1)\n",
+    "        \n",
+    "        # Generate data\n",
+    "        imputed = generator.generate_censored_demand(\n",
+    "            {'n_stores': 1},\n",
+    "            demand_params,\n",
+    "            censoring_process,\n",
+    "            seed=seed\n",
+    "        )\n",
+    "        \n",
+    "        # Calculate empirical PMF\n",
+    "        values, counts = np.unique(imputed, return_counts=True)\n",
+    "        empirical_pmf = counts / len(imputed.flatten())\n",
+    "        plt.plot(values, empirical_pmf, 'o-', label=f'n={size}', color=color)\n",
+    "    \n",
+    "    plt.title('PMF Comparison: True vs Imputed Demand')\n",
+    "    plt.xlabel('Demand')\n",
+    "    plt.ylabel('Probability')\n",
+    "    plt.legend()\n",
+    "    plt.grid(True)\n",
+    "    plt.show()\n",
+    "\n",
+    "def plot_diagnostics(sample_size, demand_params, censoring_process, seed=42):\n",
+    "    \"\"\"Plot diagnostic information about the imputation process\"\"\"\n",
+    "    generator = DynamicCensoringDemandGenerator(num_samples=sample_size, periods=1)\n",
+    "    \n",
+    "    # Generate true demand and censoring\n",
+    "    true_demand = np.random.poisson(\n",
+    "        demand_params['mean'],\n",
+    "        size=(sample_size, 1, 1)\n",
+    "    )\n",
+    "    \n",
+    "    if censoring_process['name'] == 'poisson':\n",
+    "        thresholds = np.random.poisson(\n",
+    "            censoring_process['mean'],\n",
+    "            size=(sample_size, 1, 1)\n",
+    "        )\n",
+    "    \n",
+    "    observed = np.minimum(true_demand, thresholds)\n",
+    "    censored = (true_demand > thresholds)\n",
+    "    \n",
+    "    # Plot comparison\n",
+    "    plt.figure(figsize=(15, 5))\n",
+    "    \n",
+    "    plt.subplot(131)\n",
+    "    plt.hist(true_demand.flatten(), bins=20, density=True, alpha=0.5, label='True')\n",
+    "    plt.hist(observed.flatten(), bins=20, density=True, alpha=0.5, label='Observed')\n",
+    "    plt.title('True vs Observed')\n",
+    "    plt.legend()\n",
+    "    \n",
+    "    plt.subplot(132)\n",
+    "    plt.scatter(true_demand[censored], thresholds[censored], alpha=0.1)\n",
+    "    plt.plot([0, 20], [0, 20], 'r--')\n",
+    "    plt.title('Censored Points\\nTrue Demand vs Threshold')\n",
+    "    \n",
+    "    plt.subplot(133)\n",
+    "    plt.hist(thresholds.flatten(), bins=20, density=True)\n",
+    "    plt.title('Censoring Thresholds')\n",
+    "    \n",
+    "    plt.tight_layout()\n",
+    "    plt.show()\n",
+    "\n",
+    "# Example usage\n",
+    "sample_sizes = [100, 1000, 10000]\n",
+    "demand_params = {'mean': 5}\n",
+    "censoring_process = {\n",
+    "    'name': 'poisson',\n",
+    "    'mean': 4\n",
+    "}\n",
+    "\n",
+    "plot_density_comparison(sample_sizes, demand_params, censoring_process)\n",
+    "plot_diagnostics(1000, demand_params, censoring_process)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Poisson Demand Generator (old)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 44,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "\n",
     "\n",
     "class PoissonDemandGenerator:\n",
     "    def __init__(self, num_samples, periods):\n",
@@ -38,6 +857,45 @@
     "\n",
     "    def estimate_exponential_tail_rate(self, samples, M, n_tail_buckets=3):\n",
     "        \"\"\"\n",
+    "        Estimate exponential tail rate using buckets including censoring threshold\n",
+    "        \"\"\"\n",
+    "        flat_samples = samples.flatten()\n",
+    "        \n",
+    "        # Include samples in window [M-n_tail_buckets, M]\n",
+    "        tail_samples = flat_samples[(flat_samples >= M-n_tail_buckets) & (flat_samples <= M)]\n",
+    "        \n",
+    "        # Count samples at threshold M\n",
+    "        n_at_threshold = np.sum(flat_samples == M)\n",
+    "        \n",
+    "        def neg_log_likelihood(rate):\n",
+    "            # For uncensored observations (x < M)\n",
+    "            uncensored = tail_samples[tail_samples < M]\n",
+    "            pdf_term = np.sum(np.log(stats.expon.pdf(\n",
+    "                uncensored - (M-n_tail_buckets), \n",
+    "                scale=1/rate\n",
+    "            )))\n",
+    "            \n",
+    "            # For observations at threshold (x = M)\n",
+    "            if n_at_threshold > 0:\n",
+    "                threshold_term = n_at_threshold * np.log(stats.expon.sf(\n",
+    "                    n_tail_buckets - 1,\n",
+    "                    scale=1/rate\n",
+    "                ))\n",
+    "            else:\n",
+    "                threshold_term = 0\n",
+    "                \n",
+    "            return -(pdf_term + threshold_term)\n",
+    "        \n",
+    "        result = optimize.minimize_scalar(\n",
+    "            neg_log_likelihood, \n",
+    "            bounds=(0.01, 10), \n",
+    "            method='bounded'\n",
+    "        )\n",
+    "        \n",
+    "        return result.x\n",
+    "\n",
+    "    def estimate_exponential_tail_rate_old(self, samples, M, n_tail_buckets=3):\n",
+    "        \"\"\"\n",
     "        Estimate exponential tail rate using the last few buckets before censoring\n",
     "        \n",
     "        Parameters:\n",
@@ -108,78 +966,64 @@
     "        lambda_exp = self.estimate_exponential_tail_rate(orig_samples, M)\n",
     "        \n",
     "        # Generate exponential samples for censored values\n",
-    "        censored_tails = np.round(\n",
+    "        censored_tails = np.floor(\n",
     "            M + np.random.exponential(1/lambda_exp, size=np.sum(censored_mask))\n",
     "        ).astype(int)\n",
     "        \n",
     "        # Replace censored values with imputed tail samples\n",
     "        imputed_samples[censored_mask] = censored_tails\n",
     "        \n",
-    "        return imputed_samples\n",
+    "        return imputed_samples"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Example usage\n",
+    "num_samples = 10000\n",
+    "periods = 10\n",
+    "demand_generator = PoissonDemandGenerator(num_samples, periods)\n",
+    "\n",
+    "problem_params = {\n",
+    "    'n_stores': 5,\n",
+    "    'censoring_threshold': 5\n",
+    "}\n",
     "\n",
-    "# # Example usage\n",
-    "# num_samples = 100\n",
-    "# periods = 10\n",
-    "# demand_generator = PoissonDemandGenerator(num_samples, periods)\n",
+    "demand_params = {\n",
+    "    'mean': 5\n",
+    "}\n",
     "\n",
-    "# problem_params = {\n",
-    "#     'n_stores': 5,\n",
-    "#     'censoring_threshold': 20\n",
-    "# }\n",
+    "censored_demand = demand_generator.generate_censored_demand(problem_params, demand_params)\n",
     "\n",
-    "# demand_params = {\n",
-    "#     'mean': 5\n",
-    "# }\n",
+    "plt.hist(censored_demand.flatten(), bins=range(15), density=True, alpha=0.5, label='Censored Demand')\n",
     "\n",
-    "# censored_demand = demand_generator.generate_censored_demand(problem_params, demand_params)\n",
+    "# Plot the PDF of the original Poisson demand\n",
+    "x = np.arange(0, 15)\n",
+    "poisson_pmf = stats.poisson.pmf(x, demand_params['mean'])\n",
+    "plt.plot(x, poisson_pmf, 'r-', label='Original Poisson PDF')\n",
     "\n",
-    "# # make a histogram of the flattened samples\n",
-    "# import matplotlib.pyplot as plt\n",
-    "# plt.hist(censored_demand.flatten(), bins=range(15))\n",
-    "# plt.show()"
+    "plt.legend()\n",
+    "plt.xlabel('Demand')\n",
+    "plt.ylabel('Density')\n",
+    "plt.title('Censored Demand and Original Poisson PDF')\n",
+    "plt.show()"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 47,
+   "execution_count": null,
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 1500x500 with 3 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "\n",
-      "Value Counts:\n",
-      "Value 0: 0.74%\n",
-      "Value 1: 3.18%\n",
-      "Value 2: 8.81%\n",
-      "Value 3: 13.77%\n",
-      "Value 4: 17.09%\n",
-      "Value 5: 17.77%\n",
-      "Value 6: 15.00%\n",
-      "Value 7: 9.76%\n",
-      "Value 8: 9.17%\n",
-      "Value 9: 3.00%\n",
-      "Value 10: 1.09%\n",
-      "Value 11: 0.35%\n",
-      "Value 12: 0.18%\n",
-      "Value 13: 0.08%\n",
-      "Value 15: 0.01%\n",
-      "\n",
-      "Estimated Tail Rate: 1.0438\n"
-     ]
-    }
-   ],
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
    "source": [
     "import numpy as np\n",
     "import scipy.stats as stats\n",
@@ -288,30 +1132,9 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": null,
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 1200x500 with 3 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Censoring rate: 3.25%\n",
-      "Original mean: 5.00\n",
-      "Censored mean: 4.98\n",
-      "Imputed mean: 4.98\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "import numpy as np\n",
     "import scipy.stats as stats\n",
@@ -413,27 +1236,9 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": null,
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 640x480 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Estimated rate of exponential tail: 0.0181\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "import numpy as np\n",
     "import matplotlib.pyplot as plt\n",
@@ -517,37 +1322,9 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": null,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/tmp/ipykernel_90239/1816252729.py:84: RuntimeWarning: invalid value encountered in true_divide\n",
-      "  poisson_pmf_truncated /= np.sum(poisson_pmf_truncated)\n"
-     ]
-    },
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 1200x600 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Proportion of samples censored: 0.2389\n",
-      "Mean of original Poisson: 5\n",
-      "Mean of imputed samples: 5.0322\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "import numpy as np\n",
     "import matplotlib.pyplot as plt\n",
@@ -667,37 +1444,9 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": null,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/tmp/ipykernel_27782/2575369338.py:70: RuntimeWarning: invalid value encountered in true_divide\n",
-      "  poisson_pmf_truncated /= np.sum(poisson_pmf_truncated)\n"
-     ]
-    },
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 1200x600 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Mean of original Poisson: 5\n",
-      "Mean of imputed samples: 5.1371\n",
-      "Proportion of samples above truncation: 0.2397\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "import numpy as np\n",
     "import matplotlib.pyplot as plt\n",
@@ -819,7 +1568,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.10.4"
+   "version": "3.10.16"
   }
  },
  "nbformat": 4,
diff --git a/src/algorithms/common/policies/__pycache__/policy.cpython-310.pyc b/src/algorithms/common/policies/__pycache__/policy.cpython-310.pyc
index 67e15a3..b52dfb9 100644
Binary files a/src/algorithms/common/policies/__pycache__/policy.cpython-310.pyc and b/src/algorithms/common/policies/__pycache__/policy.cpython-310.pyc differ
diff --git a/src/algorithms/common/policies/policy.py b/src/algorithms/common/policies/policy.py
index d6803b5..1d8325b 100644
--- a/src/algorithms/common/policies/policy.py
+++ b/src/algorithms/common/policies/policy.py
@@ -613,22 +613,52 @@ class PolicyNetwork(nn.Module):
         # Build backbone
         self.backbone = self._build_backbone()
         self.to(device)
+
+    def lazy_layer_init(self, layer, std=2**0.5, bias_const=0.0):
+        def init_hook(module, input):
+            if not hasattr(module, 'initialized'):
+                torch.nn.init.orthogonal_(module.weight, std)
+                torch.nn.init.constant_(module.bias, bias_const)
+                module.initialized = True
+        
+        layer.register_forward_pre_hook(init_hook)
+        return layer
+    
+    def layer_init(self, layer, std=2**0.5, bias_const=0.0):
+        torch.nn.init.orthogonal_(layer.weight, std)
+        torch.nn.init.constant_(layer.bias, bias_const)
+        return layer
     
     def _build_backbone(self):
         """Build the shared backbone network"""
         layers = []
         prev_size = self.input_size
         
-        for size in self.hidden_layers:
+        # First layer uses LazyLinear with lazy initialization
+        first_layer = self.lazy_layer_init(
+            nn.LazyLinear(self.hidden_layers[0]),
+            std=2**0.5
+        )
+        layers.append(first_layer)
+        layers.extend([
+            getattr(nn, self.activation)(),
+            nn.Dropout(self.dropout_rate)
+        ])
+        
+        # Build rest of layers
+        for i in range(1, len(self.hidden_layers)):
             if self.use_batch_norm:
-                layers.append(nn.BatchNorm1d(prev_size))
+                layers.append(nn.BatchNorm1d(self.hidden_layers[i-1]))
             
+            linear_layer = self.layer_init(
+                nn.Linear(self.hidden_layers[i-1], self.hidden_layers[i]),
+                std=2**0.5
+            )
             layers.extend([
-                nn.Linear(prev_size, size),
-                getattr(nn, self.activation)(),  # Now using capitalized name
+                linear_layer,
+                getattr(nn, self.activation)(),
                 nn.Dropout(self.dropout_rate)
             ])
-            prev_size = size
             
         return nn.Sequential(*layers)
     
@@ -647,21 +677,22 @@ class HybridPolicy(PolicyNetwork):
         self.heads = config['policy_network']['heads']
         last_hidden = self.hidden_layers[-1]
         
-        # Build output heads
+        # Build output heads with smaller std for policy outputs
         self.heads_layers = nn.ModuleDict()
         if self.heads['discrete']['enabled']:
-            self.heads_layers['discrete'] = nn.Linear(
-                last_hidden, 
-                self.heads['discrete']['size']
+            self.heads_layers['discrete'] = self.layer_init(
+                nn.Linear(last_hidden, self.heads['discrete']['size']),
+                std=0.01  # Smaller std for policy output layer
             )
         if self.heads['continuous']['enabled']:
-            self.heads_layers['continuous'] = nn.Linear(
-                last_hidden, 
-                self.heads['continuous']['size']
-            )       
+            self.heads_layers['continuous'] = self.layer_init(
+                nn.Linear(last_hidden, self.heads['continuous']['size']),
+                std=0.01  # Smaller std for policy output layer
+            )
         self.to(self.device)
     def forward(self, x, process_state=True):
 
+        # If process_state is True, then we process the state to get the features (otherwise, we already collected trajectory, and state is in correct format)
         if process_state:
             x = x['store_inventories']
 
@@ -674,14 +705,15 @@ class HybridPolicy(PolicyNetwork):
 
         # add store dimension
         features = features.unsqueeze(1)
-
-        
+   
         outputs = {}
         if 'discrete' in self.heads_layers:
             outputs['discrete'] = self.heads_layers['discrete'](features)
+            # for debugging, make this constant and equal to 10
+            # outputs['discrete'] = torch.ones_like(outputs['discrete']) * 10
         if 'continuous' in self.heads_layers:
             # for test, make this constant and equal to 10
-            outputs['continuous'] = torch.ones_like(outputs['discrete']) * 10
+            outputs['continuous'] = torch.ones_like(outputs['discrete']) * torch.inf
             # outputs['continuous'] = self.heads_layers['continuous'](features)
             
         return outputs
diff --git a/src/algorithms/common/values/__pycache__/value_network.cpython-310.pyc b/src/algorithms/common/values/__pycache__/value_network.cpython-310.pyc
index 589633d..4a3ff66 100644
Binary files a/src/algorithms/common/values/__pycache__/value_network.cpython-310.pyc and b/src/algorithms/common/values/__pycache__/value_network.cpython-310.pyc differ
diff --git a/src/algorithms/common/values/value_network.py b/src/algorithms/common/values/value_network.py
index bf0c3c5..e159487 100644
--- a/src/algorithms/common/values/value_network.py
+++ b/src/algorithms/common/values/value_network.py
@@ -17,11 +17,30 @@ class ValueNetwork(nn.Module):
         # observation_keys will be set by HybridAgent
         self.observation_keys = None
     
+    def lazy_layer_init(self, layer, std=2**0.5, bias_const=0.0):
+        def init_hook(module, input):
+            if not hasattr(module, 'initialized'):
+                torch.nn.init.orthogonal_(module.weight, std)
+                torch.nn.init.constant_(module.bias, bias_const)
+                module.initialized = True
+        
+        layer.register_forward_pre_hook(init_hook)
+        return layer
+    
+    def layer_init(self, layer, std=2**0.5, bias_const=0.0):
+        torch.nn.init.orthogonal_(layer.weight, std)
+        torch.nn.init.constant_(layer.bias, bias_const)
+        return layer
+    
     def _build_backbone(self):
         layers = []
         
-        # Use LazyLinear for first layer - will infer input size on first forward pass
-        layers.append(nn.LazyLinear(self.config['hidden_layers'][0]))
+        # Use LazyLinear for first layer with lazy initialization
+        first_layer = self.lazy_layer_init(
+            nn.LazyLinear(self.config['hidden_layers'][0]),
+            std=2 ** 0.5  # Using scalar instead of torch.sqrt(2)
+        )
+        layers.append(first_layer)
         layers.append(self._get_activation(self.config['activation']))
         layers.append(nn.Dropout(self.config.get('dropout', 0.0)))
         
@@ -33,8 +52,12 @@ class ValueNetwork(nn.Module):
             if self.config.get('batch_norm', False):
                 layers.append(nn.BatchNorm1d(prev_size))
             
-            layers.extend([
+            linear_layer = self.layer_init(
                 nn.Linear(prev_size, size),
+                std=2 ** 0.5  # Using scalar instead of torch.sqrt(2)
+            )
+            layers.extend([
+                linear_layer,
                 self._get_activation(self.config['activation']),
                 nn.Dropout(self.config.get('dropout', 0.0))
             ])
@@ -51,12 +74,23 @@ class ValueNetwork(nn.Module):
     
     def _build_head(self):
         """Build value head"""
-        return nn.Linear(self.config['hidden_layers'][-1], 1)
+        return self.layer_init(
+            nn.Linear(self.config['hidden_layers'][-1], 1),
+            std=1.0
+        )
     
     def forward(self, x, process_state=True):
         features = x
         if process_state:
             # x is a dictionary of features, so concatenate on observation keys
-            features = torch.cat([x[key].flatten(start_dim=1) for key in self.observation_keys], dim=-1)
+            features = torch.cat([x[key].flatten(start_dim=1) for key in self.observation_keys if key != 'current_period'], dim=-1)
+            if 'current_period' in self.observation_keys:
+                # Use the current_period value for all rows, so expand it to match the batch size
+                current_period_value = x['current_period'].unsqueeze(0).expand(features.size(0), -1).to(self.device)
+                # print(current_period_value.shape)
+                # print(features.shape)
+                features = torch.cat([current_period_value, features], dim=-1)
+            # print(features.shape)
+            # print(features[0: 2])
         features = self.backbone(features)
         return self.head(features) 
\ No newline at end of file
diff --git a/src/algorithms/hybrid/agents/__pycache__/hybrid_agent.cpython-310.pyc b/src/algorithms/hybrid/agents/__pycache__/hybrid_agent.cpython-310.pyc
index f19c6a9..f3240d1 100644
Binary files a/src/algorithms/hybrid/agents/__pycache__/hybrid_agent.cpython-310.pyc and b/src/algorithms/hybrid/agents/__pycache__/hybrid_agent.cpython-310.pyc differ
diff --git a/src/algorithms/hybrid/agents/hybrid_agent.py b/src/algorithms/hybrid/agents/hybrid_agent.py
index 40379ea..997d99f 100644
--- a/src/algorithms/hybrid/agents/hybrid_agent.py
+++ b/src/algorithms/hybrid/agents/hybrid_agent.py
@@ -41,9 +41,11 @@ class HybridAgent(BaseAgent):
                       f"range [{discrete_logits.min().item():.3f}, {discrete_logits.max().item():.3f}], "
                       f"mean {discrete_logits.mean().item():.3f}")
         
+        # print(f'raw_outputs: {raw_outputs["discrete"][0]}')
         # Process network output
         action_dict = self.feature_registry.process_network_output(raw_outputs, argmax=False, sample=True)
-        
+        # print(f'discrete_probs: {action_dict["discrete_probs"][0]}')
+        # print(f'average discrete_probs: {action_dict["discrete_probs"].mean(dim=0)}')
         # Get value if value network exists
         value = self.value_net(observation) if self.value_net is not None else None
         
@@ -57,14 +59,21 @@ class HybridAgent(BaseAgent):
         distribution = torch.distributions.Categorical(logits=logits)
         return distribution.entropy()
     
-    def get_logits_value_and_entropy(self, processed_observation):
-        """Get logits, value, and entropy
-        Note that processed_observation is already processed by the feature registry, so we flag it as False
-        """
+    def get_logits_value_and_entropy(self, processed_observation, actions):
+        """Get logits for specific actions, value, and entropy"""
+        raw_outputs = self.policy(processed_observation, process_state=False)
+        
+        # raw_outputs['discrete'] shape is [batch_size, n_stores, n_actions]
+        # actions shape is [batch_size]
+        # Need to reshape actions to match the logits dimension
+        actions = actions.view(-1, 1, 1).expand(-1, raw_outputs['discrete'].size(1), 1)
+        
+        # Gather logits for the specific actions that were taken
+        logits = raw_outputs['discrete'].gather(-1, actions).squeeze(-1)
         
-        logits = self.policy(processed_observation, process_state=False)['discrete']
         value = self.value_net(processed_observation, process_state=False) if self.value_net else None
-        entropy = self.get_entropy(logits)
+        entropy = self.get_entropy(raw_outputs['discrete'])
+        
         return logits, value, entropy
     
     # def transform_outputs(self, raw_outputs):
diff --git a/src/algorithms/hybrid/optimizer_wrappers/__pycache__/hybrid_wrapper.cpython-310.pyc b/src/algorithms/hybrid/optimizer_wrappers/__pycache__/hybrid_wrapper.cpython-310.pyc
index 587a6c3..b178720 100644
Binary files a/src/algorithms/hybrid/optimizer_wrappers/__pycache__/hybrid_wrapper.cpython-310.pyc and b/src/algorithms/hybrid/optimizer_wrappers/__pycache__/hybrid_wrapper.cpython-310.pyc differ
diff --git a/src/algorithms/hybrid/optimizer_wrappers/hybrid_wrapper.py b/src/algorithms/hybrid/optimizer_wrappers/hybrid_wrapper.py
index 184550c..76c6b5a 100644
--- a/src/algorithms/hybrid/optimizer_wrappers/hybrid_wrapper.py
+++ b/src/algorithms/hybrid/optimizer_wrappers/hybrid_wrapper.py
@@ -2,6 +2,8 @@ from src.algorithms.common.optimizer_wrappers.base_wrapper import BaseOptimizerW
 import torch
 import torch.nn as nn
 import torch.nn.functional as F
+import matplotlib.pyplot as plt
+import numpy as np
 
 class HybridWrapper(BaseOptimizerWrapper):
    def __init__(self, model, optimizer, gradient_clip=None, weight_decay=0.0, device='cpu'):
@@ -18,55 +20,98 @@ class HybridWrapper(BaseOptimizerWrapper):
        
        T, B = advantages.shape
        batch_size = T * B
+    #    batch_size = 2 * B
+    #    print(f'advantages.shape: {advantages.shape}')
+    #    print(f'advantages[28:30]: {advantages[28:30].shape}')
+
+    #    print(f"trajectory_data['logits'].shape: {trajectory_data['logits'].shape}")
+
+
+    #    tensors = {
+    #        'observations': trajectory_data['observations'][28:30].reshape(batch_size, -1),
+    #        'logits': trajectory_data['logits'][28:30].reshape(batch_size, -1),
+    #        'advantages': advantages[28:30].reshape(batch_size),
+    #        'returns': returns[28:30].reshape(batch_size),
+    #        'values': trajectory_data['values'][28:30].reshape(batch_size)
+    #    }
+
+    #    #print the shape of the tensors
+    #    print(f'tensors["observations"].shape: {trajectory_data["observations"].shape}')
+    #    print(f'tensors["observations"].shape: {trajectory_data["observations"].shape}')
+    #    print(f'tensors["logits"].shape: {tensors["logits"].shape}')
+    #    print(f'tensors["advantages"].shape: {tensors["advantages"].shape}')
+    #    print(f'tensors["returns"].shape: {tensors["returns"].shape}')
+    #    print(f'tensors["values"].shape: {tensors["values"].shape}')
        
        # Flatten all batches
        tensors = {
            'observations': trajectory_data['observations'].reshape(batch_size, -1),
-           'logits': trajectory_data['logits'].reshape(batch_size, -1),
+           'actions': trajectory_data['actions'].reshape(batch_size),  # Actions are indices
+           'logits': trajectory_data['logits'].reshape(batch_size),    # Logits for selected actions
            'advantages': advantages.reshape(batch_size),
            'returns': returns.reshape(batch_size),
            'values': trajectory_data['values'].reshape(batch_size)
        }
+    #    print(f'tensors["observations"].shape: {tensors["observations"].shape}')
+
        tensors = {k: v.detach() for k, v in tensors.items()}
        
        clip_coef = 0.2
-       num_optimizer_epochs = 1
-       minibatch_size = T*B//64
+       num_optimizer_epochs = 10
+       minibatch_size = T*B//4
+    #    print(f'minibatch_size: {minibatch_size}')
        target_kl = 0.015
-       norm_adv = True
-       clip_vloss = True
+       norm_adv = False
+       clip_vloss = False
        ent_coef = 0.01
+    #    vf_coef = 0.5 * 100
        vf_coef = 0.5
        max_grad_norm = 0.5
        
        total_loss = 0
+       total_v_loss = 0  # Track value loss separately
        b_inds = torch.arange(batch_size, device=self.device)
-       counter = 0
+       
+    #    # Print initial value metrics
+    #    print("\nInitial Value Predictions:")
+    #    print(f"Mean Value: {tensors['values'].mean():.3f}")
+    #    print(f"Std Value: {tensors['values'].std():.3f}")
+    #    print(f"Mean Returns: {tensors['returns'].mean():.3f}")
+    #    print(f"Std Returns: {tensors['returns'].std():.3f}")
+    #    print(f"Value-Return Correlation: {torch.corrcoef(torch.stack([tensors['values'], tensors['returns']]))[0,1]:.3f}")
+       
+       clipfracs = []
+       explained_vars = []
        
        for epoch in range(num_optimizer_epochs):
-           print(f"\nEpoch {epoch}")
+           counter = 0
+           epoch_v_loss = 0
+           num_minibatches = 0
+        #    perm = torch.arange(batch_size, device=self.device)
            perm = torch.randperm(batch_size, device=self.device)
            b_inds = b_inds[perm]
+
+           all_values = []
+           all_returns = [] # Track value loss separately
            
            for start in range(0, batch_size, minibatch_size):
                end = start + minibatch_size
                mb_inds = b_inds[start:end]
+               num_minibatches += 1
                
                mb_obs = tensors['observations'][mb_inds]
-               newlogits, newvalue, entropy = self.model.get_logits_value_and_entropy(mb_obs)
-               newlogits = newlogits.squeeze(1)
+               mb_actions = tensors['actions'][mb_inds]
+               
+               
+               # Get logits for specific actions, value, and entropy
+               newlogits, newvalue, entropy = self.model.get_logits_value_and_entropy(mb_obs, mb_actions)
                
                # Calculate log ratio directly from logits
-               logratio = newlogits - tensors['logits'][mb_inds]
-               if counter == 0:
-                    if not torch.allclose(newlogits, tensors['logits'][mb_inds]):
-                        print(f"New logits shape: {newlogits.shape}")
-                        print(f"Old logits shape: {tensors['logits'][mb_inds].shape}")
-                        diff_indices = (newlogits != tensors['logits'][mb_inds]).nonzero(as_tuple=True)[0]
-                        print(f"Different logits at indices: {diff_indices}")
-                        print(f"New logits: {newlogits[diff_indices]}")
-                        print(f"Old logits: {tensors['logits'][mb_inds][diff_indices]}")
-                    assert torch.allclose(newlogits, tensors['logits'][mb_inds])
+               logratio = newlogits - tensors['logits'][mb_inds].unsqueeze(-1)
+               if counter == 0 and False:
+                    print(f'newlogits: {newlogits[0]}')
+                    print(f'tensors["logits"][mb_inds]: {tensors["logits"][mb_inds][0]}')
+                    print(f'logratio: {logratio[0]}')
                     counter += 1
                
                # Debug log ratios before exp
@@ -82,15 +127,17 @@ class HybridWrapper(BaseOptimizerWrapper):
                ratio = logratio.exp()
                
                with torch.no_grad():
-                   approx_kl = ((ratio - 1) - logratio).mean()
-               
+                    # More stable KL calculation
+                    # approx_kl = (ratio * logratio).mean()  # KL between old and new policy
+                    approx_kl = ((ratio - 1) - logratio).mean()
+
                mb_advantages = tensors['advantages'][mb_inds]
                if norm_adv:
                    mb_advantages = (mb_advantages - mb_advantages.mean()) / (mb_advantages.std() + 1e-8)
                
                mb_advantages = mb_advantages.unsqueeze(-1).expand_as(ratio)
-               pg_loss1 = -mb_advantages * ratio
-               pg_loss2 = -mb_advantages * torch.clamp(ratio, 1 - clip_coef, 1 + clip_coef)
+               pg_loss1 = mb_advantages * ratio
+               pg_loss2 = mb_advantages * torch.clamp(ratio, 1 - clip_coef, 1 + clip_coef)
                pg_loss = torch.max(pg_loss1, pg_loss2).mean()
                
                if clip_vloss:
@@ -104,9 +151,17 @@ class HybridWrapper(BaseOptimizerWrapper):
                    v_loss = 0.5 * torch.max(v_loss_unclipped, v_loss_clipped).mean()
                else:
                    v_loss = 0.5 * ((newvalue - tensors['returns'][mb_inds]) ** 2).mean()
+                
+                
+                #    print(f'newvalue: {newvalue[0]}')
+                #    print(f'tensors["returns"][mb_inds]: {tensors["returns"][mb_inds][0]}')
+                #    print(f'tensors["values"][mb_inds]: {tensors["values"][mb_inds][0]}')
+                   
                
                entropy_loss = entropy.mean()
-               loss = pg_loss - ent_coef * entropy_loss + v_loss * vf_coef
+            #    loss = v_loss * vf_coef
+               loss = pg_loss + v_loss * vf_coef
+            #    loss = pg_loss - ent_coef * entropy_loss + v_loss * vf_coef
                
                self.optimizer.zero_grad(set_to_none=True)
                loss.backward()
@@ -114,30 +169,161 @@ class HybridWrapper(BaseOptimizerWrapper):
                    nn.utils.clip_grad_norm_(self.model.parameters(), max_grad_norm)
                self.optimizer.step()
                
+               epoch_v_loss += v_loss.item()
+               
                total_loss += loss.item()
+               total_v_loss += v_loss.item()
+               # Compute statistics for the entire epoch
+        #    all_values = torch.cat(all_values)
+        #    all_returns = torch.cat(all_returns)
+           
+        #    # Print detailed metrics for each epoch
+        #    print(f"\nEpoch {epoch} Detailed Metrics:")
+        #    print(f"Value Loss: {epoch_v_loss / num_minibatches:.3f}")
+        #    print(f"Values - Mean: {all_values.mean():.3f}, Std: {all_values.std():.3f}, Min: {all_values.min():.3f}, Max: {all_values.max():.3f}")
+        #    print(f"Returns - Mean: {all_returns.mean():.3f}, Std: {all_returns.std():.3f}, Min: {all_returns.min():.3f}, Max: {all_returns.max():.3f}")
+        #    print(f"Mean Absolute Error: {(all_values - all_returns).abs().mean():.3f}")
+        #    print(f"Value-Return Correlation: {torch.corrcoef(torch.stack([all_values.squeeze(), all_returns]))[0,1]:.3f}")
+           
+           if epoch == num_optimizer_epochs - 1 and False:
+               # Print final value metrics
+               with torch.no_grad():
+                   final_values = self.model.value_net(tensors['observations'], process_state=False)
+                   print("\nFinal Value Predictions:")
+                   print(f"Mean Value: {final_values.mean():.3f}")
+                   print(f"Std Value: {final_values.std():.3f}")
+                   print(f"Mean Returns: {tensors['returns'].mean():.3f}")
+                   print(f"Std Returns: {tensors['returns'].std():.3f}")
+                   print(f"Value-Return Correlation: {torch.corrcoef(torch.stack([final_values.squeeze(), tensors['returns']]))[0,1]:.3f}")
+           
+           # Print metrics for each epoch
+           avg_epoch_v_loss = epoch_v_loss / num_minibatches
+        #    print(f"\nEpoch {epoch} Metrics:")
+        #    print(f"Value Loss: {avg_epoch_v_loss:.3f}")
+           
            
            if target_kl is not None and approx_kl > target_kl:
+               print(f"Early stopping at epoch {epoch} due to KL divergence of {approx_kl}.")
                break
        
-       return total_loss / (num_optimizer_epochs * (batch_size // minibatch_size))
+    #    assert False
+       avg_v_loss = total_v_loss / (num_optimizer_epochs * (batch_size // minibatch_size))
+    #    print(f"\nAverage Value Loss across all epochs: {avg_v_loss:.3f}")
+       
+    #    print("Initial State-Value Analysis:")
+       # Check if different states get different values
+       state_values_correlation = torch.corrcoef(torch.stack([
+           tensors['observations'].sum(dim=1),  # Simplistic state representation
+           tensors['values'].squeeze()
+       ]))[0,1]
+    #    print(f"State-Value correlation: {state_values_correlation:.3f}")
+
+    #    # plot state vs value
+    #    # restart plot
+    #    plt.clf()
+    #    plt.scatter(tensors['observations'].sum(dim=1).cpu().numpy(), tensors['values'].cpu().numpy())
+    #    plt.xlabel('State')
+    #    plt.ylabel('Value')
+    #    plt.title('State vs Value')
+    #    # save plot
+    #    plt.savefig('state_vs_value.png')
+
+       rewards = trajectory_data['rewards'][20:50]
+       discounted_rewards = torch.zeros_like(rewards[0:20])
+       for t in range(20):
+           discounted_rewards[t] = rewards[t:t+10].sum(dim=0)
+       values = trajectory_data['values'][20:40]
+       
+    #    # plot value vs sum of discounted rewards
+    #    plt.clf()
+    #    plt.scatter(values.flatten().cpu().numpy(), discounted_rewards.flatten().cpu().numpy())
+    #    plt.xlabel('Value')
+    #    plt.ylabel('Sum of Discounted Rewards')
+    #    plt.title('Value vs Sum of Discounted Rewards')
+    #    plt.savefig('value_vs_sum_of_discounted_rewards.png')
+
+    #    # print correlation between values and discounted rewards
+    #    print(f'correlation between values and discounted rewards: {torch.corrcoef(torch.stack([values.flatten(), discounted_rewards.flatten()]))[0,1]:.3f}')
+
+    #    # Check temporal consistency
+    #    print(f"Early states mean value: {tensors['values'][:batch_size//3].mean():.3f}")
+    #    print(f"Late states mean value: {tensors['values'][-batch_size//3:].mean():.3f}")
+       
+       # Calculate clipfrac
+       clipfrac = ((ratio - 1.0).abs() > clip_coef).float().mean().item()
+       clipfracs.append(clipfrac)
+       
+       # Calculate explained variance
+       with torch.no_grad():
+           y_pred = newvalue.cpu().numpy()
+           y_true = tensors['returns'][mb_inds].cpu().numpy()
+           var_y = np.var(y_true)
+           explained_var = np.nan if var_y == 0 else 1 - np.var(y_true - y_pred) / var_y
+           explained_vars.append(explained_var)
+       
+       # Calculate average metrics
+       metrics = {
+           'loss/total': total_loss / (num_optimizer_epochs * (batch_size // minibatch_size)),
+           'loss/value': total_v_loss / (num_optimizer_epochs * (batch_size // minibatch_size)),
+           'loss/policy': pg_loss.item(),
+           'loss/entropy': entropy_loss.item(),
+           'policy/approx_kl': approx_kl.item(),
+           'policy/clipfrac': np.mean(clipfracs),
+           'policy/explained_var': np.mean(explained_vars),
+           'policy/state_value_correlation': state_values_correlation.item(),
+           'policy/value_return_correlation': torch.corrcoef(torch.stack([
+               values.flatten(), 
+               discounted_rewards.flatten()
+           ]))[0,1].item()
+       }
+       
+       return metrics
 
    def compute_advantages(self, trajectory_data):
-       gamma = 0.99
-       gae_lambda = 0.95
+       gamma = 0.95
+       gae_lambda = 0.99
+       use_gae = True  # Add this flag to switch between methods
        
        T, B = trajectory_data['rewards'].shape
-       
+
+       # Standardize rewards more efficiently by computing mean and std only once
+       rewards = trajectory_data['rewards']
+       mean_rewards = rewards.mean()
+       std_rewards = rewards.std() + 1e-8
+       trajectory_data['rewards'] = (rewards - mean_rewards) / std_rewards
+
        with torch.no_grad():
            next_value = self.model.value_net(trajectory_data['next_observation'])
            values = trajectory_data['values'].reshape(T, B)
            rewards = trajectory_data['rewards']
-           advantages = torch.zeros_like(rewards, device=self.device)
-           
-           lastgaelam = 0
-           for t in reversed(range(T)):
-               nextvalues = next_value.squeeze() if t == T - 1 else values[t + 1]
-               delta = rewards[t] + gamma * nextvalues - values[t]
-               advantages[t] = lastgaelam = delta + gamma * gae_lambda * lastgaelam
            
-       returns = advantages + values
-       return advantages, returns
\ No newline at end of file
+           if use_gae:
+               # Existing GAE implementation
+               advantages = torch.zeros_like(rewards, device=self.device)
+               lastgaelam = 0
+               for t in reversed(range(T)):
+                   nextvalues = next_value.squeeze() if t == T - 1 else values[t + 1]
+                   delta = rewards[t] + gamma * nextvalues - values[t]
+                   advantages[t] = lastgaelam = delta + gamma * gae_lambda * lastgaelam
+               returns = advantages + values
+           else:
+               # New alternative implementation
+               returns = torch.zeros_like(rewards, device=self.device)
+               for t in reversed(range(T)):
+                #    print(f't: {t}')
+                   next_return = next_value.squeeze() if t == T - 1 else returns[t + 1]
+                   returns[t] = rewards[t] + gamma * next_return
+               advantages = returns - values
+        # print average value, returns, and advantages per period
+    #    print(f'average value: {values.mean(dim=1)}')
+    #    print(f'average returns: {returns.mean(dim=1)}')
+    #    print(f'average advantages: {advantages.mean(dim=1)}')
+    #    print(f'average rewards: {rewards.mean(dim=1)}')
+    #    print(f'average next_value: {next_value.mean(dim=1)}')
+
+    #    # get state, sum over feature dimensions, and get mean per period
+    #    state = trajectory_data['observations'].sum(dim=2)
+    #    state_mean = state.mean(dim=1)
+    #    print(f'state_mean: {state_mean}')
+
+       return advantages, returns
diff --git a/src/envs/inventory/__pycache__/hybrid_simulator.cpython-310.pyc b/src/envs/inventory/__pycache__/hybrid_simulator.cpython-310.pyc
index c6457af..ad4405b 100644
Binary files a/src/envs/inventory/__pycache__/hybrid_simulator.cpython-310.pyc and b/src/envs/inventory/__pycache__/hybrid_simulator.cpython-310.pyc differ
diff --git a/src/envs/inventory/__pycache__/range_manager.cpython-310.pyc b/src/envs/inventory/__pycache__/range_manager.cpython-310.pyc
index 578faaa..e595f3d 100644
Binary files a/src/envs/inventory/__pycache__/range_manager.cpython-310.pyc and b/src/envs/inventory/__pycache__/range_manager.cpython-310.pyc differ
diff --git a/src/envs/inventory/hybrid_simulator.py b/src/envs/inventory/hybrid_simulator.py
index 0f61ae8..46f09eb 100644
--- a/src/envs/inventory/hybrid_simulator.py
+++ b/src/envs/inventory/hybrid_simulator.py
@@ -32,7 +32,9 @@ class HybridSimulator(Simulator):
         # Then add additional costs from registered components
         additional_costs = self._calculate_additional_costs(observation, action_dict)
         total_costs = base_costs + additional_costs
-        
+
+        # print(f'total_costs: {total_costs[0]}')
+        # print()
         return next_state, total_costs, False, {}, {}
         
     def _calculate_base_transitions_and_costs(self, observation, action_dict):
@@ -43,11 +45,23 @@ class HybridSimulator(Simulator):
             self._internal_data,
             observation['current_period'].item()
         )
+
+        # Update time related features (e.g., days to christmas)
+        self.update_time_features(
+            self._internal_data, 
+            self.observation, 
+            self.observation_params, 
+            current_period=self.observation['current_period'].item() + 1
+            )
+
+        # print(f'current_demands: {current_demands[0, 0]}')
         
         # 2. Calculate post-demand inventory
         inventory = observation['store_inventories']
         inventory_on_hand = inventory[:, :, 0]
         post_inventory_on_hand = inventory_on_hand - current_demands
+
+        # print(f'post_inventory_on_hand: {post_inventory_on_hand[0, 0]}')
         
         # 3. Calculate variable costs following base simulator pattern
         if self.maximize_profit:
@@ -55,6 +69,7 @@ class HybridSimulator(Simulator):
                 -observation['underage_costs'] * torch.minimum(inventory_on_hand, current_demands) + 
                 observation['holding_costs'] * torch.clip(post_inventory_on_hand, min=0)
             )
+            # print(f'base_costs: {base_costs[0, 0]}')
         else:
             base_costs = (
                 observation['underage_costs'] * torch.clip(-post_inventory_on_hand, min=0) + 
@@ -63,7 +78,10 @@ class HybridSimulator(Simulator):
         
         # Add procurement costs
         base_costs += observation['procurement_costs']*action_dict['feature_actions']['total_action']
-        
+        # print total action and demand and current period
+        # print(f'total_action: {action_dict["feature_actions"]["total_action"][0, 0]}')
+        # print(f'demand: {current_demands[0, 0]}')
+        # print(f'current_period: {observation["current_period"]}')
         # Sum costs across stores
         base_costs = base_costs.sum(dim=1)
         
@@ -71,10 +89,12 @@ class HybridSimulator(Simulator):
         if self.problem_params.get('lost_demand', False):
             post_inventory_on_hand = torch.clip(post_inventory_on_hand, min=0)
         
+        # print(f'post_inventory_on_hand: {post_inventory_on_hand[0, 0]}')
+        
         # 5. Get allocation from feature actions
         feature_actions = action_dict['feature_actions']
-        order_feature = list(feature_actions.keys())[0]
-        allocation = feature_actions[order_feature]['action'].sum(dim=-1)
+        allocation = feature_actions['total_action']
+        # print(f'allocation: {allocation[0, 0]}')
         
         # 6. Update inventories using same pattern as base simulator
         lead_time = self.problem_params.get('lead_time', 1)
@@ -85,15 +105,20 @@ class HybridSimulator(Simulator):
             lead_time
         )
 
+        # print(f'observation["store_inventories"]: {observation["store_inventories"][0, 0]}')
+        # Update current period
+        self.observation['current_period'] += 1
+
         return observation, base_costs
     
     def _calculate_additional_costs(self, observation, action_dict):
         """Calculate additional costs from registered components"""
         additional_costs = torch.zeros(self.batch_size, device=self.device)
-        
+
         # Apply all registered cost functions
         for cost_func in self.cost_functions.values():
             additional_costs += cost_func(observation, action_dict)
+        # print(f'additional_costs: {additional_costs[0]}')
         
         return additional_costs
     
diff --git a/src/envs/inventory/range_manager.py b/src/envs/inventory/range_manager.py
index 0bdd448..ce535e1 100644
--- a/src/envs/inventory/range_manager.py
+++ b/src/envs/inventory/range_manager.py
@@ -205,6 +205,7 @@ class RangeManager:
                   f"mean {logits.mean().item():.3f}")
         
         probs = F.softmax(logits, dim=-1)
+        # print(f'probs: {probs[0]}')
         
         # Debug probabilities
         if (probs < 0).any() or (probs > 1).any():
@@ -218,6 +219,7 @@ class RangeManager:
             probs = F.one_hot(indices, num_classes=logits.size(-1)).float()
         elif sample:
             try:
+
                 indices = torch.multinomial(probs.view(-1, probs.size(-1)), num_samples=1)  # Sample from last dim
                 probs = torch.zeros_like(probs)
                 probs.scatter_(-1, indices.view(probs.shape[:-1] + (1,)), 1)  # Place 1s in last dim
@@ -229,7 +231,7 @@ class RangeManager:
                 print("Any Inf:", torch.isinf(probs).any())
                 print("Any negative:", (probs < 0).any())
                 raise e
-        
+        # print(f'average probs: {probs.mean(dim=0)}')
         return probs
     
     def get_continuous_values(self, raw_values):
diff --git a/src/features/__pycache__/feature_registry.cpython-310.pyc b/src/features/__pycache__/feature_registry.cpython-310.pyc
index 98886b6..caefa58 100644
Binary files a/src/features/__pycache__/feature_registry.cpython-310.pyc and b/src/features/__pycache__/feature_registry.cpython-310.pyc differ
diff --git a/src/features/feature_registry.py b/src/features/feature_registry.py
index 56a75f3..b003f27 100644
--- a/src/features/feature_registry.py
+++ b/src/features/feature_registry.py
@@ -56,6 +56,10 @@ class FeatureRegistry:
                 argmax=argmax,
                 sample=sample
             )
+            # Get indices of selected actions (where the 1s are in discrete_probs)
+            discrete_actions = discrete_probs.argmax(dim=-1)  # This gives us indices instead of one-hot
+            # Get logits for selected actions
+            action_logits = raw_outputs['discrete'].gather(-1, discrete_actions.unsqueeze(-1)).squeeze(-1)
         
         # Get continuous values if continuous head exists
         continuous_values = None
@@ -76,8 +80,10 @@ class FeatureRegistry:
         )
         
         return {
-            'discrete_probs': discrete_probs,
-            'logits': raw_outputs['discrete'],
+            'discrete_probs': discrete_probs,  # One-hot format
+            'discrete_actions': discrete_actions,  # Index format
+            'action_logits': action_logits,
+            'logits': raw_outputs['discrete'],  # Full logits
             'continuous_values': continuous_values,
             'feature_actions': feature_actions
         }
diff --git a/src/training/__pycache__/trainer.cpython-310.pyc b/src/training/__pycache__/trainer.cpython-310.pyc
index 537adbb..176f9b2 100644
Binary files a/src/training/__pycache__/trainer.cpython-310.pyc and b/src/training/__pycache__/trainer.cpython-310.pyc differ
diff --git a/src/training/trainer.py b/src/training/trainer.py
index f9c4ec5..9eb83cc 100644
--- a/src/training/trainer.py
+++ b/src/training/trainer.py
@@ -10,6 +10,7 @@ import os
 import copy
 import datetime
 import matplotlib.pyplot as plt
+from src.utils.logger import Logger
 
 
 class Trainer():
@@ -39,9 +40,28 @@ class Trainer():
               optimizer_wrapper, problem_params, observation_params, 
               params_by_dataset, trainer_params):
         """Training loop using optimizer_wrapper for parameter updates"""
+        
+        # Merge all configs for logging
+        complete_config = {
+            **trainer_params,
+            'problem_params': problem_params,
+            'observation_params': observation_params,
+            'params_by_dataset': params_by_dataset,
+        }
+        
+        # Add logging params from trainer_params if they exist
+        if 'logging_params' in trainer_params:
+            complete_config.update(trainer_params['logging_params'])
+        
+        print("Logging config:", {k: v for k, v in complete_config.items() if k.startswith('use_') or k.startswith('wandb_')})
+        
+        # Initialize logger with complete config
+        logger = Logger(complete_config, model)
+        global_step = 0
+        
         for epoch in range(epochs):
             # Training epoch
-            train_loss, train_loss_to_report = self.do_one_epoch(
+            train_metrics = self.do_one_epoch(
                 optimizer_wrapper,
                 data_loaders['train'],
                 loss_function,
@@ -53,11 +73,13 @@ class Trainer():
                 train=True,
                 ignore_periods=params_by_dataset['train']['ignore_periods']
             )
-            self.all_train_losses.append(train_loss_to_report)
-
+            
+            # After first forward pass, model should be initialized
+            logger.watch_model()  # This will only take effect once
+            
             # Validation epoch
             with torch.no_grad():
-                dev_loss, dev_loss_to_report = self.do_one_epoch(
+                dev_metrics = self.do_one_epoch(
                     optimizer_wrapper,
                     data_loaders['dev'],
                     loss_function,
@@ -69,17 +91,34 @@ class Trainer():
                     train=False,
                     ignore_periods=params_by_dataset['dev']['ignore_periods']
                 )
-            self.all_dev_losses.append(dev_loss_to_report)
-
+            
+            # Log metrics
+            logger.log_metrics(train_metrics, global_step, prefix='train')
+            logger.log_metrics(dev_metrics, global_step, prefix='dev')
+            logger.log_model_weights(model, global_step)
+            
+            # Log action distribution if available
+            if 'actions' in train_metrics:
+                logger.log_action_distribution(train_metrics['actions'], global_step)
+            
+            global_step += 1
+            
             # Update best parameters and save if needed
             self.update_best_params_and_save(
-                epoch, train_loss_to_report, dev_loss_to_report, 
-                trainer_params, model, optimizer_wrapper.optimizer
+                epoch, 
+                train_metrics['loss/total'], 
+                dev_metrics['loss/total'],
+                trainer_params, 
+                model, 
+                optimizer_wrapper.optimizer
             )
-
+            
             # Log progress
             if epoch % trainer_params['print_results_every_n_epochs'] == 0:
-                print(f'Epoch {epoch}: Train Loss = {train_loss_to_report:.4f}, Dev Loss = {dev_loss_to_report:.4f}')
+                print(f'Epoch {epoch}: Train Loss = {train_metrics["loss/total"]:.4f}, '
+                      f'Dev Loss = {dev_metrics["loss/total"]:.4f}')
+        
+        logger.close()
 
     def test(self, loss_function, simulator, model, data_loaders, optimizer, problem_params, observation_params, params_by_dataset, discrete_allocation=False):
 
@@ -112,6 +151,9 @@ class Trainer():
         epoch_loss_to_report = 0  # Loss ignoring the first 'ignore_periods' periods
         total_samples = len(data_loader.dataset)
         periods_tracking_loss = periods - ignore_periods  # Number of periods for which we report the loss
+        
+        optimizer_metrics_sum = None
+        num_batches = 0
 
         for i, data_batch in enumerate(data_loader):  # Loop through batches of data
             data_batch = self.move_batch_to_device(data_batch)
@@ -121,14 +163,35 @@ class Trainer():
                 loss_function, simulator, model, periods, problem_params, data_batch, observation_params, ignore_periods, discrete_allocation, collect_trajectories=True
                 )
             
+            # Always accumulate simulator metrics
             epoch_loss += total_reward.item()  # Rewards from period 0
             epoch_loss_to_report += reward_to_report.item()  # Rewards from period ignore_periods onwards
             
-            # If training, let optimizer_wrapper handle the optimization
+            # If training, get optimizer metrics but don't use them for loss tracking
             if train and model.trainable:
-                optimizer_wrapper.optimize(trajectory_data)
+                batch_metrics = optimizer_wrapper.optimize(trajectory_data)
+                
+                # Accumulate optimizer metrics separately
+                if optimizer_metrics_sum is None:
+                    optimizer_metrics_sum = {k: v for k, v in batch_metrics.items()}
+                else:
+                    for k, v in batch_metrics.items():
+                        optimizer_metrics_sum[k] += v
+                num_batches += 1
+
+        # Calculate average metrics using simulator results
+        metrics = {
+            'loss/total': epoch_loss/(total_samples*periods*problem_params['n_stores']),
+            'loss/reported': epoch_loss_to_report/(total_samples*periods_tracking_loss*problem_params['n_stores'])
+        }
         
-        return epoch_loss/(total_samples*periods*problem_params['n_stores']), epoch_loss_to_report/(total_samples*periods_tracking_loss*problem_params['n_stores'])
+        # Add optimizer metrics if available
+        if optimizer_metrics_sum is not None:
+            for k, v in optimizer_metrics_sum.items():
+                if k not in ['loss/total', 'loss/reported']:  # Don't overwrite simulator metrics
+                    metrics[k] = v / num_batches
+
+        return metrics
     
     def simulate_batch(self, loss_function, simulator, model, periods, problem_params, data_batch, observation_params, ignore_periods=0, discrete_allocation=False, collect_trajectories=False):
         """
@@ -157,19 +220,22 @@ class Trainer():
             trajectory_data = {
                 'observations': [],
                 'rewards': [],
+                'actions': [],
                 'logits': [],
                 'values': [],
                 'terminated': []
             }
 
         observation, _ = simulator.reset(periods, problem_params, data_batch, observation_params)
+        # # set a fixed seed for debugging
+        # torch.manual_seed(0)
+        # np.random.seed(0)
         
         for t in range(periods):
             # Store observation if collecting trajectories
             vectorized_obs = self.vectorize_observation(observation, observation_keys)
-            if vectorized_obs is not None:
-                # Deep clone the observation to ensure it's completely detached
-                trajectory_data['observations'].append(vectorized_obs.detach().clone())
+            # if vectorized_obs is not None:
+            #     trajectory_data['observations'].append(vectorized_obs.detach().clone())
 
             # Add internal data to observation
             observation_and_internal_data = {k: v for k, v in observation.items()}
@@ -178,12 +244,10 @@ class Trainer():
             # Sample action and get policy outputs
             model_output = model(observation_and_internal_data)
             action_dict = model_output.get('action_dict')
-            logits = action_dict.get('logits', None)
             value = model_output.get('value', None)
 
             if discrete_allocation:
-                action_dict = {key: val.round() for key, val in action_dict.items()}
-            
+                action_dict = {key: val.round() for key, val in action_dict.items()}            
 
             # Execute environment step
             next_observation, reward, terminated, _, _ = simulator.step(observation, action_dict)
@@ -191,16 +255,20 @@ class Trainer():
 
             # Store trajectory data with proper detaching and cloning
             if collect_trajectories:
-                if logits is not None:
-                    # Ensure logits are properly detached and cloned
-                    detached_logits = logits.flatten(start_dim=1).detach().clone()
-                    trajectory_data['logits'].append(detached_logits)
-                    
+                if vectorized_obs is not None:
+                    trajectory_data['observations'].append(vectorized_obs.detach().clone())
+                trajectory_data['actions'].append(action_dict['discrete_actions'].detach().clone())
+                trajectory_data['logits'].append(action_dict['action_logits'].detach().clone())
                 if value is not None:
                     trajectory_data['values'].append(value.detach().clone())
                 trajectory_data['rewards'].append(reward.detach().clone())
                 trajectory_data['terminated'].append(torch.tensor(terminated).detach().clone())
 
+            #     # print [-1][0] of every list in trajectory_data
+            #     for key, value in trajectory_data.items():
+            #         if key != 'terminated':
+            #             print(f'{key}: {value[-1][0]}')
+            # print()
             # Update running rewards
             batch_reward += total_reward
             if t >= ignore_periods:
@@ -218,6 +286,14 @@ class Trainer():
                 k: torch.stack(v) if v[0] is not None else None 
                 for k, v in trajectory_data.items()
             }
+
+        # print the shape of the trajectory data
+        # print(f'trajectory_data["observations"].shape: {trajectory_data["observations"].shape}')
+        # print(f'trajectory_data["actions"].shape: {trajectory_data["actions"].shape}')
+        # print(f'trajectory_data["logits"].shape: {trajectory_data["logits"].shape}')
+        # print(f'trajectory_data["values"].shape: {trajectory_data["values"].shape}')
+        # print(f'trajectory_data["rewards"].shape: {trajectory_data["rewards"].shape}')
+        # print(f'trajectory_data["terminated"].shape: {trajectory_data["terminated"].shape}')
         
         trajectory_data['next_observation'] = observation
 
@@ -344,7 +420,10 @@ class Trainer():
         # Build vector using specified keys
         for key in observation_keys:
             if key in observation:
-                vectors.append(observation[key].reshape(observation[key].shape[0], -1).clone())  # Use clone to ensure the return is frozen
+                to_append = observation[key]
+                if to_append.shape[0] != observation['store_inventories'].shape[0]:
+                    to_append = to_append.expand(observation['store_inventories'].shape[0], -1)
+                vectors.append(to_append.reshape(to_append.shape[0], -1).clone().to(self.device))  # Use clone to ensure the return is frozen
         
         if not vectors:  # If nothing to track, return None
             return None
